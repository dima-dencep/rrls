plugins {
    id "java-library"
    id "idea"
    id "maven-publish"
    id "net.neoforged.gradle.userdev" version "7.+"
    id "net.neoforged.licenser" version "0.7.2"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

archivesBaseName = "rrls"
version = "5.0.0"
group = "com.github.dima_dencep.mods"

subsystems {
    parchment {
        minecraftVersion = "1.20.4"
        mappingsVersion = "2024.02.25"
        enabled = true
    }
}

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
    }
}

repositories {
    maven {
        name "CurseForge"
        url "https://cursemaven.com"

        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name 'Maven for PR #794' // https://github.com/neoforged/NeoForge/pull/794
        url 'https://prmaven.neoforged.net/NeoForge/pr794'
        content {
            includeModule('net.neoforged', 'neoforge')
            includeModule('net.neoforged', 'testframework')
        }
    }
}

dependencies {
    implementation "net.neoforged:neoforge:20.5.0-alpha.1.20.5-pre1.20240412.132656"
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

java {
    withSourcesJar()
}

license {
    header = rootProject.file('HEADER')
    skipExistingHeaders = false

    tasks {
        rrls {
            files.from rootProject.fileTree("src", {
                include "**/*.java"
            })
        }
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
