import xyz.wagyourtail.unimined.expect.task.ExpectPlatformJar

plugins {
    id "xyz.wagyourtail.unimined.expect-platform" version "1.0.5" apply false
    id "net.neoforged.moddev" version "1.0.14" apply false
    id "dev.architectury.loom" version "1.7-SNAPSHOT" apply false
    id "net.neoforged.licenser" version "0.7.+" apply false
    id "io.github.p03w.machete" version "2.+" apply false
}

subprojects {
    apply plugin: "xyz.wagyourtail.unimined.expect-platform"
    apply plugin: "io.github.p03w.machete"
    apply plugin: "net.neoforged.licenser"
    apply plugin: "java-library"

    machete {
        ignoredTasks.add("shadowJar")
        ignoredTasks.add("jar")
    }

    license {
        header = rootProject.file('HEADER')
        skipExistingHeaders = false

        tasks {
            rrls {
                files.from rootProject.fileTree("src", {
                    include "**/*.java"
                })
            }
        }
    }

    processResources {
        filesMatching(["META-INF/neoforge.mods.toml", "fabric.mod.json"]) {
            expand "project": project
        }
    }

    if (project.name != "common") {
        var platofmTask = tasks.create("${project.name}ExeptPlatform", ExpectPlatformJar) {
            var jarTask = project(":common").tasks.jar
            dependsOn(jarTask)

            group = "unimined"
            platformName = project.name

            archiveClassifier.set "platform"

            inputFiles = files(jarTask.archiveFile)
        }

        tasks.jar {
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE

            dependsOn(platofmTask)
            from(zipTree(platofmTask.archiveFile))
        }

        tasks.withType(JavaExec).configureEach {
            expectPlatform.insertAgent(it, project.name)
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = "${rootProject.mod_version}+mc${rootProject.minecraft_version}-${project.name}"
    group = rootProject.maven_group

    repositories {
        maven {
            name "NeoForged"
            url "https://maven.neoforged.net/releases"
            content {
                excludeGroupByRegex "org.parchmentmc"
            }
        }
        maven {
            name "ParchmentMC"
            url "https://maven.parchmentmc.org"
        }
        maven {
            url "https://maven.shedaniel.me"
        }
        maven {
            url "https://maven.terraformersmc.com/releases"
        }
        maven {
            url "https://maven.wagyourtail.xyz/releases"
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release.set 21
    }

    java {
        withSourcesJar()
    }

    publishing {
        repositories {
        }
    }
}