plugins {
    id "dev.architectury.loom"
}

loom {
    silentMojangMappingsLicense() // Reason for using architectury loom

    accessWidenerPath = file("src/main/resources/rrls.accesswidener")

    runs {
        client {
            client()
            configName = "Fabric Client"
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project(":common").neoForge.parchment.minecraftVersion.get()}:${project(":common").neoForge.parchment.mappingsVersion.get()}@zip")
    }

    modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"
    // modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    modCompileOnly("com.terraformersmc:modmenu:${rootProject.modmenu_version}") {
        transitive = false
    }

    modApi("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    implementation(project(":common")) {
        transitive = false
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

/*publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name
            from components.java
        }
    }
}*/
